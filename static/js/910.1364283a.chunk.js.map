{"version":3,"file":"static/js/910.1364283a.chunk.js","mappings":"iPAmDA,UA9Ca,WACX,OAA8BA,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACQC,GAAaC,EAAAA,EAAAA,MAAbD,SAiBR,OAfAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,2FACEL,GAAW,GADb,kBAGwBM,EAAAA,iBAAqBH,GAH7C,OAGUF,EAHV,OAIIC,EAASD,GAJb,gDAMIM,QAAQC,IAAI,KAAMC,SANtB,yBAQIT,GAAW,GARf,6EADc,uBAAC,WAAD,wBAYdU,EACD,GAAE,CAACP,KAGF,4BACGJ,IAAW,SAAC,UAAD,IACD,KAAVE,IACC,0BACE,wBACGA,EAAMU,KAAKC,KAAI,SAAAC,GAAG,OACjB,0BACGA,EAAIC,eACH,gBACEC,IAAG,wCAAmCF,EAAIC,cAC1CE,IAAKH,EAAII,iBAIb,uBAAIJ,EAAII,iBACR,uCAAeJ,EAAIK,eATZL,EAAIM,GADI,UAkB9B,C,qDC7CD,UAFe,kBAAM,SAAC,KAAD,CAAcC,OAAO,KAAKC,MAAM,KAAKC,MAAM,WAAjD,C,kRCDfC,IAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAW,mCAEJC,EAAS,mCAAG,oGACAF,IAAAA,IAAA,sCAAyCC,IADzC,cACjBE,EADiB,yBAEhBA,EAASC,MAFO,2CAAH,qDAKTC,EAAgB,mCAAG,WAAMC,GAAN,uFACPN,IAAAA,IAAA,+BACGC,EADH,kBACqBK,IAFd,cACxBH,EADwB,yBAIvBA,EAASC,MAJc,2CAAH,sDAOhBG,EAAa,mCAAG,WAAM3B,GAAN,uFACJoB,IAAAA,IAAA,gBAAmBpB,EAAnB,oBAAuCqB,IADnC,cACrBE,EADqB,yBAEpBA,EAASC,MAFW,2CAAH,sDAKbI,EAAgB,mCAAG,WAAM5B,GAAN,uFACPoB,IAAAA,IAAA,iBACXpB,EADW,4BACiBqB,IAFV,cACxBE,EADwB,yBAIvBA,EAASC,MAJc,2CAAH,sDAOhBK,EAAmB,mCAAG,WAAM7B,GAAN,uFACVoB,IAAAA,IAAA,iBACXpB,EADW,4BACiBqB,IAFP,cAC3BE,EAD2B,yBAI1BA,EAASC,MAJiB,2CAAH,qD","sources":["components/Cast.js","components/Loader/Loader.js","components/services/app.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as API from './services/app';\nimport Loader from 'components/Loader/Loader';\n\nconst Cast = () => {\n  const [loading, setLoading] = useState(false);\n  const [movie, setMovie] = useState('');\n  const { moviesId } = useParams();\n\n  useEffect(() => {\n    async function fetchMoviesForCast() {\n      setLoading(true);\n      try {\n        const movie = await API.getMoviesForCast(moviesId);\n        setMovie(movie);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchMoviesForCast();\n  }, [moviesId]);\n\n  return (\n    <main>\n      {loading && <Loader />}\n      {movie !== '' && (\n        <div>\n          <ul>\n            {movie.cast.map(mov => (\n              <li key={mov.id}>\n                {mov.profile_path && (\n                  <img\n                    src={`http://image.tmdb.org/t/p/w200${mov.profile_path}`}\n                    alt={mov.original_name}\n                  />\n                )}\n\n                <p>{mov.original_name}</p>\n                <p>Character: {mov.character}</p>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </main>\n  );\n};\n\nexport default Cast;\n","import { BallTriangle } from 'react-loader-spinner';\n\nconst Loader = () => <BallTriangle height=\"50\" width=\"50\" color=\"#ff1693\" />;\n\nexport default Loader;\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst BASE_KEY = '3c9b3437ebab156a512248e157c99300';\n\nexport const getMovies = async () => {\n  const response = await axios.get(`/trending/movie/day?api_key=${BASE_KEY}`);\n  return response.data;\n};\n\nexport const getMoviesByQuery = async query => {\n  const response = await axios.get(\n    `search/movie?api_key=${BASE_KEY}&query=${query}`\n  );\n  return response.data;\n};\n\nexport const getMoviesById = async moviesId => {\n  const response = await axios.get(`movie/${moviesId}?api_key=${BASE_KEY}`);\n  return response.data;\n};\n\nexport const getMoviesForCast = async moviesId => {\n  const response = await axios.get(\n    `/movie/${moviesId}/credits?api_key=${BASE_KEY}`\n  );\n  return response.data;\n};\n\nexport const getMoviesForReviews = async moviesId => {\n  const response = await axios.get(\n    `/movie/${moviesId}/reviews?api_key=${BASE_KEY}`\n  );\n  return response.data;\n};\n"],"names":["useState","loading","setLoading","movie","setMovie","moviesId","useParams","useEffect","API","console","log","message","fetchMoviesForCast","cast","map","mov","profile_path","src","alt","original_name","character","id","height","width","color","axios","BASE_KEY","getMovies","response","data","getMoviesByQuery","query","getMoviesById","getMoviesForCast","getMoviesForReviews"],"sourceRoot":""}